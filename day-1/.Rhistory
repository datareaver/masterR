big_x(mtcars, 10)
x <- 100
big_x(mtcars, 10)
df <- dplyr::data_frame(x = 1:10, threshold = 100)
big_x(df, 5)
strptime("01 January 2010", "%d %B %Y")
Sys.setlocale(locale = "fr_FR")
strptime("01 January 2010", "%d %B %Y")
option(digits = 3)
options(digits = 3)
pi
c(1, NA) == c(NA, 1)
2:(length(x) - 1)
x <- 1:2
2:(length(x) - 1)
impute_na1 <- function(x) {
if (length(x) <= 2)
return(x)
for (i in 2:(length(x) - 1)) {
if (is.na(x[i])) {
x[i] <- (x[i - 1] + x[i + 1]) / 2
}
x
}
impute_na1(c(1, NA, 3))
impute_na1(c(1, NA, NA, 3))
impute_na1(c(NA, 1))
?approxfun
?reshape2::melt
?tidyr::gather
x <- list(
a = 1,
b = "b",
c = 1:10
)
str(x["a"])
str(x[c("a", "c")])
str(x[["a"]])
str(x[[c("a", "c")]])
x <- list(
a = 1,
b = "b",
c = 1:10,
d = list(
a = 1,
b = 2
)
str(x[[c("d", "a")]])
x <- list(abc = 1, def = 2)
x$a
x$var
x[[var]]
var <- "def"
x[[var]]
library(purrr)
set.seed(1014)
l <- rerun(20, runif(sample(1:10, 1)))
str(l)
x <- c(4, 2, 9)
seq_along(x)
1:length(x)
x <- c(4, 2)
seq_along(x)
1:length(x)
x <- numeric()
x
mtcars %>%
filter(cyl == 10)
mtcars %>%
filter(cyl == 10)
library(dplyr)
mtcars %>%
filter(cyl == 10)
filter(mtcars, cyl == 10)
filter(mtcars, cyl == 10)$wt
x <- numeric()
seq_along(x)
1:length(x)
length
pryr::show_c_source(.Primitive("length"))
lapply
compute <- function(x, f, ...) {
out <- numeric(length(x))
for(i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
l2 <- list(x = c(1, 2, 5), y = c(5, 8, NA))
compute(l2, mean)
compute(l2, mean, na.rm = TRUE)
compute <- function(x, f, ...) {
browser()
out <- numeric(length(x))
for(i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
compute(l2, mean, na.rm = TRUE)
list(...)
str(list(...))
map_dbl
?map_dbl
map_dbl(mtcars, mean)
mu <- c(-10, 0, 10, 100)
rnorm(10, mu[[1]])
mu[1]
rnorm(10, mu[[1]])
map_dbl(mu, rnorm)
mu
rnorm(-10)
map_dbl(mu, rnorm)
traceback()
map_dbl(mu, rnorm, n = 10)
map(mu, rnorm, n = 10)
nunique <- function(x) length(unique(x))
map_int(iris, nunique)
map_int(iris, function(x) length(unique(x)))
map_int(iris, length(unique(x)))
x <- 1:3
map_int(iris, length(unique(x)))
x <- 1:3
map_dbl(iris, length(unique(x)))
length(unique(x)
map_dbl(iris, length(unique(x)))
length(unique(x))
map_dbl(iris, 3)
map_int(iris, ~ length(unique(.)))
df <- data.frame(
a = 1L,
b = 1.5,
y = Sys.time(),
z = ordered(1)
)
df <- data.frame(
a = 1L,
b = 1.5,
y = Sys.time(),
z = ordered(1)
)
str(sapply(df[1:4], class))
str(sapply(df[1:2], class))
str(sapply(df[3:4], class))
str(sapply(df[0], class))
str(map_chr(df[1:4], class))
str(map(df[1:4], class))
str(map_chr(df[1:4], ~ paste(class, collapse = "/")))
str(map_chr(df[1:4], ~ paste(class(.), collapse = "/")))
map_chr(df[1:4], ~ paste(class(.), collapse = "/"))
col_means <- function(df) {
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars)
col_means(mtcars[, 0])
col_means(mtcars[0, ])
mean(numeric())
sum(numeric())
length(numeric())
0 / 0
col_means(mtcars[0, ])
mtcars[, "mpg", drop = F]
col_means(mtcars[, "mpg", drop = F])
col_means(1:10)
col_means(as.matrix(mtcars))
df <- data.frame(x = 1:26, y = letters)
col_means(df)
col_means <- function(df) {
numeric <- map_lgl(df, is.numeric)
numeric_cols <- df[, numeric, drop = FALSE]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars)
col_means(mtcars[, 0])
col_means(mtcars[0, ])
col_means(mtcars[, "mpg", drop = F])
col_means(1:10)
df <- data.frame(x = 1:26, y = letters)
col_means(df)
col_means(1:10)
col_means(as.matrix(mtcars))
col_means <- function(df) {
if (!is.data.frame(df)) {
stop("`df` should be data frame")
}
numeric <- map_lgl(df, is.numeric)
numeric_cols <- df[, numeric, drop = FALSE]
data.frame(lapply(numeric_cols, mean))
}
col_means(1:10)
col_means(as.matrix(mtcars))
col_means <- function(df) {
# if (!is.data.frame(df)) {
#   stop("`df` should be a  data frame")
# }
df <- as.data.frame(df)
numeric <- map_lgl(df, is.numeric)
numeric_cols <- df[, numeric, drop = FALSE]
data.frame(lapply(numeric_cols, mean))
}
col_means(1:10)
col_means(as.matrix(mtcars))
col_means(1:10)
apply
by_cyl <- split(mtcars, mtcars$cyl)
str(by_cyl)
by_cyl[1]
str(by_cyl[[1]])
models <- map(by_cyl, ~ lm(mpg ~ wt, data = .))
str(models)
models[[1]]
summary(models[[1]])
str(summary(models[[1]]))
summary(models[[1]])$r.squared
summaries <- map(models, summary)
map_dbl(summaries, function(x) x$r.squared)
map_dbl(summaries, ~ .$r.squared)
map_dbl(summaries, "r.squared")
map_dbl(summaries, 8)
input <- list(1:10, sqrt(4), 5, "n")
map(input, log)
input <- list(1:10, sqrt(4), 5, "n")
safely(log)
map(input, safely(log))
str(map(input, safely(log)))
urls <- c(
"http://google.com",
"https://en.wikipedia.org",
"asdfasdasdkfjlda"
)
contents <- map(urls, readLines)
contents <- urls %>% map(safely(readLines))
contents
contents %>%
transpose() %>%
str()
contents <- urls %>%
map(safely(readLines)) %>%
transpose()
ok <- content$errors %>% map_lgl(is.null)
ok <- contents$errors %>% map_lgl(is.null)
ok <- contents$error %>% map_lgl(is.null)
ok
urls[!ok]
contents$result[ok] %>% str()
mean <- c(5, 10, -3)
sd <- c(1, 2, 3)
map2(mean, sd, ~ rnorm(10, mean = .x, sd = .y))
results <- map2(mean, sd, ~ rnorm(10, mean = .x, sd = .y))
results %>% map_dbl(mean)
results <- map2(mean, sd, ~ rnorm(10, mean = .x, sd = .y))
results %>% map_dbl(mean)
results
mean
rm(mean)
results %>% map_dbl(mean)
results %>% map_dbl(sd)
sd
rm(sd)
results %>% map_dbl(sd)
results %>% map_dbl(base::mean)
results %>% map_dbl(base::sd)
results %>% map_dbl(stats::sd)
results %>% map_dbl(base::mean)
results %>% map_dbl(stats::sd)
?vapply
?apply
x <- 1:6
attr(x, "max") <- 5
attr(x, "max")
attributes(x)
structure(1:10, min = 1, max = 10)
attributes(mtcars)
dim(x) <- c(9, 5)
x <- 1:45
dim(x) <- c(9, 5)
x
attributes(x)
x
f <- factor(c("a", "b", "c"))
typeof(f)     # Built on top of integer
attributes(f) # Use levels and class attributes
x1 <- rep("bananananananananana", 1e4)
x2 <- factor(x1)
attributes(x2)
unclass(x2)
pryr::object_size(x1)
pryr::object_size(x2)
pryr::object_size(x1)
pryr::object_size(x1[[1]])
pryr::object_size(x1[[1]]) * 1e4
d <- data.frame(f)
typeof(d)     # Built on top of list
attributes(d) # names, row.names and class
mean
dr_devtools()
str(dr_devtools())
x1 <- as.Date("1970-01-02")
typeof(x1)
attributes(x1)
unclass(x1)
x1 <- as.Date("1970-01-01")
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-03"))
unclass(as.Date("1969-12-31"))
x1 + 10
x1 + 1:10
x1 <- as.Date("1970-01-02")
x1 + 10
min(x1 + 1:10)
mean(x1 + 1:10)
median(x1 + 1:10)
x1 / 2
x1 * 2
x2 <- as.POSIXct(x1)
typeof(x2)
attributes(x2)
unclass(x2)
mod <- lm(mpg ~ wt, data = mtcars)
typeof(mod)
attributes(mod)
unclass(mod)
str(unclass(mod))
source("rv.r")
dice <- rv(1:6)
mean(dice)
min(dice)
max(dice)
range(dice)
P(dice > 3)
dice > 3
dice + dice
plot(dice + dice)
plot(dice + dice + dice)
plot(dice + dice + dice + dice)
plot(dice + dice + dice + dice + dice)
plot(dice + dice + dice + dice + dice + dice)
plot(dice + dice + dice + dice + dice + dice + dice)
list(x = x, p = p)
x <- c(-1, 0, 1, 2, 3)
p <- c(0.2, 0.1, 0.3, 0.1, 0.3)
list(x = x, p = p)
?parent.frame
?do.call
showstack = function() {
env <- environment()
while(!identical(env, emptyenv()))
env <- evalq(parent.frame(), envir = env)
print(env)
}
showstack <- function() {
env <- environment()
while(!identical(env, emptyenv()))
env <- evalq(parent.frame(), envir = env)
print(env)
}
g3=function(t) showstack()
g2=function(w) g3(w)
g1=function(z) g2(z)
g=function(y) g1(y)
g()
showstack()
install.packages(c("roxygen2", "devtools"))
NA == NA
x <- c(1:2)
x[c(0,1)]
x <- rnorm(1e6)
y <- list(x,x,x)
pryr::object_size(y)
is.na(x) | is.na(y)
x <- c(1, 1, NA, NA)
y <- c(1, NA, 1, NA)
is.na(x) | is.na(y)
is.na(x) & is.na(y)
both_NA <- function(a, b) {
is.na(a) & is.na(b)
}
both_NA(x, y)
both_NA <- function(a, b) {
stopifnot(length(a) == length(b))
is.na(a) & is.na(b)
}
both_NA(x, y)
y <- c(1, NA, 1)
both_NA(x, y)
both_NA <- function(a, b) {
#stopifnot(length(a) == length(b))
is.na(a) & is.na(b)
}
both_NA(x, y)
intersect(which(x), which(y))
intersect(which(is.na(x)), which(is.na(y)))
1+ NA
get("mean")
library(purrr)
x <- list(1, 10, 100)
y <- list(1, 2, 3)
map2(x, y, ~ .x + .y)
map2(x, y, `+`)
data("mtcars")
map_df(mtcars, mean)
map_dbl(c(-10,0,10,100),rnorm, n = 10)
data('iris')
map_dbl(iris, unique)
map(iris, unique)
map_dbl(mtcars, mean)
mu <- c(-10,0,10,100)
map_dbl(mu, rnorm, n = 10)
mu <- c(-10,0,10,100)
map_dbl(mu, rnorm, n = 10)
map(mu, rnorm, n = 10)
map_df(mu, rnorm, n = 10)
col_means(mtcars)
col_means <- function(df) {
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars)
col_means(mtcars[, 0])
model <- function(df) lm(mpg ~ wt, data = df)
map(by_cyl, model)
# Shorter
map(by_cyl, function(df) lm(mpg ~ wt, data = df))
# Shortest (only for purrr)
map(by_cyl, ~ lm(mpg ~ wt, data = .))
by_cyl <- split(mtcars, mtcars$cyl)
model <- function(df) lm(mpg ~ wt, data = df)
map(by_cyl, model)
# Shorter
map(by_cyl, function(df) lm(mpg ~ wt, data = df))
# Shortest (only for purrr)
map(by_cyl, ~ lm(mpg ~ wt, data = .))
models <- map(by_cyl, ~ lm(mpg ~ wt, data = .))
map(models, summary)
map(models, summary)$coef
map(models, function(x) summary(x)[['coef']])
map(models, function(x) summary(x)[['coefficients']])
map(models, function(x) summary(x))
map(models, function(x) names(summary(x)))
map(models, function(x) summary(x)[["r.squared"]])
contents <- urls %>% map(safely(readLines)) %>% transpose()
urls <- c(
"http://google.com",
"https://en.wikipedia.org",
"asdfasdasdkfjlda"
)
# Fails
contents <- map(urls, readLines)
# Always succeeds
contents <- urls %>% map(safely(readLines)) %>% transpose()
contents
library(purrr)
urls <- c(
"http://google.com",
"https://en.wikipedia.org",
"asdfasdasdkfjlda"
)
# Fails
contents <- map(urls, readLines)
# Always succeeds
contents <- urls %>% map(safely(readLines)) %>% transpose()
is.null(contents$error)
map_lgl(contents$error, is.null)
!map_lgl(contents$error, is.null)
urls[!map_lgl(contents$error, is.null)]
successes <-
urls[!]
successes <- map_lgl(contents$error, is.null)
urls[!successes]
contents$result[successes]
map(contents$error, class)
map(contents$error, function(x) inherits(x, "error"))
data("mtcars")
class(mtcars)
typeof(mtcars)
attributes(mtcars)
?summary
rv <- function(x, probs = NULL) {
if (is.rv(x)) x <- as.numeric(x)
if (is.null(probs)) {
probs <- rep(1, length(x)) / length(x)
} else {
if (length(x) != length(probs)) stop("Values and probability...")
check_probs(probs)
}
rv <- function(x, probs = NULL) {
if (is.rv(x)) x <- as.numeric(x)
if (is.null(probs)) {
probs <- rep(1, length(x)) / length(x)
} else {
if (length(x) != length(probs)) stop("Values and probability...")
check_probs(probs)
}
rv(c(1,1,2,2,3))
is.rv <- function(x) {
# equivalent to "rv" %in% class(x)
inherits(x, "rv")
}
rv(c(1,1,2,2,3))
rv
test <- rv(c(1,1,2,2,3))
test
print.rv <- function(x, ...) {
cat("THIS IS MY METHOD\n")
cat("Probabilites:", rv)
}
print(rv)
test[1]
test[1:length(test)]
